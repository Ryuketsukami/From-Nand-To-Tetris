// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
    Mux16(a=x, b=false, sel=zx, out = xOrZero);
    Not16(in = xOrZero, out = notX);
    Mux16(a=xOrZero, b=notX, sel = nx, out= finalX);
    Mux16(a=y, b=false, sel=zy, out = yOrZero);
    Not16(in = yOrZero, out = notY);
    Mux16(a=yOrZero, b=notY, sel = ny, out= finalY);
    And16(a=finalX, b=finalY, out=xAndY);
    Add16(a=finalX, b=finalY, out=xPlusY);
    Mux16(a=xAndY, b=xPlusY, sel = f, out = afterF);
    Not16(in=afterF, out=notAfterF);
    Mux16(a=afterF, b=notAfterF, sel=no, out = almostOut, out = out);

    Mux16(a=almostOut, b=false, sel=false, out[15]=ng);

    Not16(in=almostOut, out[0]= notOut0);
    Not16(in=almostOut, out[1]= notOut1);
    Not16(in=almostOut, out[2]= notOut2);
    Not16(in=almostOut, out[3]= notOut3);
    Not16(in=almostOut, out[4]= notOut4);
    Not16(in=almostOut, out[5]= notOut5);
    Not16(in=almostOut, out[6]= notOut6);
    Not16(in=almostOut, out[7]= notOut7);
    Not16(in=almostOut, out[8]= notOut8);
    Not16(in=almostOut, out[9]= notOut9);
    Not16(in=almostOut, out[10]= notOut10);
    Not16(in=almostOut, out[11]= notOut11);
    Not16(in=almostOut, out[12]= notOut12);
    Not16(in=almostOut, out[13]= notOut13);
    Not16(in=almostOut, out[14]= notOut14);
    Not16(in=almostOut, out[15]= notOut15);

    And(a=notOut0, b=notOut1, out = out1);
    And(a=out1, b=notOut2, out = out2);
    And(a=out2, b=notOut3, out = out3);
    And(a=out3, b=notOut4, out = out4);
    And(a=out4, b=notOut5, out = out5);
    And(a=out5, b=notOut6, out = out6);
    And(a=out6, b=notOut7, out = out7);
    And(a=out7, b=notOut8, out = out8);
    And(a=out8, b=notOut9, out = out9);
    And(a=out9, b=notOut10, out = out10);
    And(a=out10, b=notOut11, out = out11);
    And(a=out11, b=notOut12, out = out12);
    And(a=out12, b=notOut13, out = out13);
    And(a=out13, b=notOut14, out = out14);
    And(a=out14, b=notOut15, out = zr);

}