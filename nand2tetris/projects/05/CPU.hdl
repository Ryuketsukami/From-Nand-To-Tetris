// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction


    PARTS:
    Mux16(b= ALUOut, a[0..14]= instruction[0..14], a[15] = false, sel = instruction[15], out= regAin);
    Not(in = instruction[15], out=instA);
    Or(a=instA, b=instruction[5], out=loadA);
    ARegister(in = regAin, in[15] =false, load = loadA, out=regAout);


    Mux16(a=regAout, b=inM, sel= instruction[12], out=xALU);
    ALU(y= regDout, x=xALU, no = instruction[6], f = instruction[7], nx = instruction[8], zx = instruction[9], ny = instruction[10], zy = instruction[11], out=ALUOut, zr = zeroOut, ng = negOut);
    Or(a=zeroOut, b=negOut, out = beforeNot);
    Not(in = beforeNot, out=posOut);


    And(a=instruction[0], b= posOut, out=firstAnd);
    And(a=instruction[1], b= zeroOut, out=secondAnd);
    And(a=instruction[2], b= negOut, out=thirdAnd);
    Or8Way(in[0]=firstAnd, in[1]=secondAnd, in[2]=thirdAnd, out=beforeJmpCheck);
    And(a=beforeJmpCheck, b=instruction[15], out =jmpCheck);


    And(a= instruction[4], b = instruction[15], out= loadD);

    DRegister(in = ALUOut, load = loadD, out = regDout);
    


    And(a = instruction[3], b= instruction[15], out = writeM);
    And16(a=ALUOut, b=true, out=outM);
    And16(a=regAout, b=true, out[0..14]=addressM);
    PC(inc= true, load=jmpCheck, reset=reset, in=regAout, out[0..14]=pc);



}